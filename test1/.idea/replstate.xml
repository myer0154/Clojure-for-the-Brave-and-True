<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1464809562099">{:repl-history {:ide [], :local [&quot;(sort [1 2 65 7 -24 56 0 -99])&quot; &quot;(sort &gt; [1 2 65 7 -24 56 0 -99])&quot; &quot;(sort == [1 2 65 7 -24 56 0 -99])&quot; &quot;(java.util.Date.)&quot; &quot;(java.util.Date. 100)&quot; &quot;(java.util.Date. 10000)&quot; &quot;(java.util.Date. 90000)&quot; &quot;(java.util.Date. 99990000)&quot; &quot;(java.util.Date. 9999999990000)&quot; &quot;(java.util.Date. 9999999990)&quot; &quot;(java.util.Date. 9999999999)&quot; &quot;(java.util.Date. 99999999999)&quot; &quot;(java.util.Date. 999999999999)&quot; &quot;(java.util.Date. 9999999999999)&quot; &quot;(sor [{:age 99}, {:age 13}, {:age 7}])&quot; &quot;(sort [{:age 99}, {:age 13}, {:age 7}])&quot; &quot;(sort-by second [[:a 7] [:c 13] [:b 21]])&quot; &quot;(def plays [{:band \&quot;Burial\&quot;,    :plays 979    :loved 9}\n            {:band \&quot;Eno\&quot;        :plays 2333,  :loved 15}\n            {:band \&quot;Bill Evans\&quot; :plays 979,   :loved 9}\n            {:band \&quot;Magma\&quot;      Lplays 2665 :loved 31}])&quot; &quot;(def plays [{:band \&quot;Burial\&quot;,    :plays 979    :loved 9}\n            {:band \&quot;Eno\&quot;        :plays 2333,  :loved 15}\n            {:band \&quot;Bill Evans\&quot; :plays 979,   :loved 9}\n            {:band \&quot;Magma\&quot;      :plays 2665 :loved 31}])&quot; &quot;plays&quot; &quot;(def sort-by-loved-ratio (partial sort-by #(/ (:plays %) (:loved %))))&quot; &quot;(sort-by-loved-ratio plays)&quot; &quot;(columns)&quot; &quot;(defn columns [column-names]\n  (fn [row]\n    (vec (map row column-names))))&quot; &quot;(sort-by (columns [:plays :loved :band]) plays)&quot; &quot;(doc reduce)&quot; &quot;(reduce + [1 2 3 4 5 6])&quot; &quot;(reduce + [1 2 3 4 5 7])&quot; &quot;(defn keys-apply [f ks m]\n  (let [only (select-keys m ks)]\n    (zipmap (keys only)\n            (map f (vals only)))))&quot; &quot;(doc only)&quot; &quot;(keys-apply #(.toUpperCase %) #{:band} (plays 0))&quot; &quot;(plays 0)&quot; &quot;(select-leys (plays 0) :band)&quot; &quot;(select-leys (plays 0) #{:band})&quot; &quot;(select-keys (plays 0) #{:band})&quot; &quot;(select-keys (plays 0) :band)&quot; &quot;(select-keys (plays 0) [:band])&quot; &quot;(keys )&quot; &quot;(keys (select-keys (plays 0) [:band]))&quot; &quot;(doc keys)&quot; &quot;(doc select-keys)&quot; &quot;(select-keys :band plays)&quot; &quot;(select-keys plays [:band])&quot; &quot;(select-keys (plays 1) [:band])&quot; &quot;(defn manip-map [f ks m]\n  (merge m (keys-apply f ks m)))&quot; &quot;(manip-map #(int (/ % 2)) #{:plays :loved} (plays 0))&quot; &quot;(#{:plays :loved} (plays 0))&quot; &quot;((plays 0) :plays)&quot; &quot;((plays 0) :loved)&quot; &quot;(defn mega-love! [ks]\n  (map (partial manip-map #(int (* % 1000)) ks) plays))&quot; &quot;(mega-love! [:loved])&quot;], :remote []}}</component>
</project>