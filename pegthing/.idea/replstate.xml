<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459888293976">{:repl-history {:ide [], :local [&quot;(valid-move? my-board 8 4)&quot; &quot;(valid-move? my-board 1 4)&quot; &quot;(valid-move? my-board 11 4)&quot; &quot;(valid-move? my-board 13 4)&quot; &quot;(valid-move? my-board 6 4)&quot; &quot;(valid-move? my-board 4 6)&quot; &quot;(my-board)&quot; &quot;(make-move my-board 1 4)&quot; &quot;(make-move my-board 1 6)&quot; &quot;(make-move my-board 1 7)&quot; &quot;(move-peg my-board 1 4)&quot; &quot;(move-peg my-board 1 6)&quot; &quot;(move-peg my-board 1 5)&quot; &quot;(seq my-board)&quot; &quot;(get (second my-board) :pegged)&quot; &quot;(get my-board :pegged)&quot; &quot;(filter #(get (second %) :pegged my-board))&quot; &quot;(def b2 (filter #(get (second %) :pegged my-board)))&quot; &quot;b2&quot; &quot;(b2)&quot; &quot;alpha-start&quot; &quot;(char alpha-start)&quot; &quot;(char alpha-end)&quot; &quot;letters&quot; &quot;(char (- alpha-end 1))&quot; &quot;(range alpha-start alpha-end)&quot; &quot;(char (range alpha-start alpha-end))&quot; &quot;(map char (range alpha-start alpha-end))&quot; &quot;(row-positions 2)&quot; &quot;(row-positions 3\n               )&quot; &quot;(row-positions 4)&quot; &quot;(row-positions 5)&quot; &quot;(row-positions 17)&quot; &quot;(row-padding 2 2)&quot; &quot;(row-padding 2 3)&quot; &quot;(row-padding 1 3)&quot; &quot;(render-row my-board 1)&quot; &quot;(render-row my-board 2)&quot; &quot;(print-board my-board)&quot; &quot;fuck&quot; &quot;(get-input)&quot; &quot;(characters-as-string \&quot;Fuck this noise\&quot;)&quot; &quot;my-board&quot; &quot;(characters-as-strings \&quot;Fuck this noise\&quot;)&quot; &quot;(-main)&quot; &quot;5&quot; &quot;a&quot; &quot;d&quot; &quot;f&quot; &quot;e&quot; &quot;(max '(9 8 7 6 5 4 3))&quot; &quot;(max [9 8 7 6 5 4 3])&quot; &quot;(doc max)&quot; &quot;(map max '(1 2 3 4 5 6 7))&quot; &quot;(map 1 2 3 4 5)&quot; &quot;(max 1 2 3 4 5)&quot; &quot;(apply max '(1 2 3 4 5 6 7))&quot; &quot;.indexOf&quot; &quot;(.index Of 7 '(1 2 3 4 5 6 7 8 9 10))&quot; &quot;(.indexOf 7 '(1 2 3 4 5 6 7 8 9 10))&quot; &quot;(.indexOf '(1 2 3 4 5 6 7 8 9 10) 7)&quot; &quot;(.indexOf '(1 2 3 4 5 6 7 8 9 10) 1)&quot; &quot;(doc .indexOf)&quot; &quot;(source defn)&quot; &quot;(*ns*)&quot; &quot;(doc ns-name)&quot; &quot;(ns-name nil)&quot; &quot;(ns *ns*)&quot; &quot;(ns user))&quot; &quot;(ns user)&quot; &quot;(ns-interns pegthing.core)&quot; &quot;(ns-interns *pegthing.core*)&quot; &quot;(ns-name *ns*)&quot; &quot;(Def great-books [\&quot;East of Eden\&quot; \&quot;The Glass Bead Game\&quot;])&quot; &quot;(def great-books [\&quot;East of Eden\&quot; \&quot;The Glass Bead Game\&quot;])&quot; &quot;#'user/great-books&quot; &quot;(#'user/great-books)&quot; &quot;(get (ns-interns *ns*) 'great-books)&quot; &quot;(ns-map *ns*)&quot; &quot;(deref #'user/greatbooks)&quot; &quot;(deref #'user/great-books)&quot; &quot;(def great-books [\&quot;The Power of Bees\&quot; \&quot;Journey to Upstairs\&quot;])&quot; &quot;great-books&quot; &quot;(ns-interns *ns*)&quot; &quot;(create-ns 'cheese.taxonomy)&quot; &quot;(ns-name)&quot; &quot;(ns-name (create-ns 'cheese.taxonomy))&quot; &quot;(doc test)&quot; &quot;(doc get)&quot; &quot;cheese.taxonomy/cheddars&quot; &quot;(in-ns 'cheese.taxonomy)&quot; &quot;(def cheddars [\&quot;mild\&quot; \&quot;medium\&quot; \&quot;strong\&quot; \&quot;sharp\&quot; \&quot;extra sharp\&quot;])&quot; &quot;(def bries [\&quot;Wisconsin\&quot; \&quot;Somerset\&quot; \&quot;Brie de Meaux\&quot; \&quot;Brie de Melun\&quot;])&quot; &quot;(clojure.core/refer 'cheese.taxonomy)&quot; &quot;bries&quot; &quot;cheddars&quot; &quot;(clojure.core/get (clojure.core/ns-map clojure.core/*ns*) 'bries)&quot; &quot;(clojure.core/refer-clojure)&quot; &quot;(in-ns 'cheese.analysis)&quot; &quot;(defn- private-function\n  \&quot;Just an example that does nothing\&quot;\n  [])&quot; &quot;(cheese.analysis/private-function)&quot;], :remote []}}</component>
</project>