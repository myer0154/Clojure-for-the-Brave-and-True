<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459796124468">{:repl-history {:ide [], :local [&quot;filename&quot; &quot;(doc slurp)&quot; &quot;(source slurp)&quot; &quot;(slurp filename)&quot; &quot;(convert :glitter-index \&quot;3\&quot;)&quot; &quot;(convert :name \&quot;Teddy Boy\&quot;)&quot; &quot;(convert :face \&quot;Teddy Boy\&quot;)&quot; &quot;(parse (slurp filename))&quot; &quot;(first (mapify (parse (slurp filename))))&quot; &quot;(glitter-filter 1 (mapify (parse (slurp filename))))&quot; &quot;(glitter-filter 0 (mapify (parse (slurp filename))))&quot; &quot;(glitter-names 0 (mapify (parse (slurp filename))))&quot; &quot;(glitter-names 2 (mapify (parse (slurp filename))))&quot; &quot;(glitter-names 5 (mapify (parse (slurp filename))))&quot; &quot;(glitter-names 3 (mapify (parse (slurp filename))))&quot; &quot;(glitter-filter 3 (mapify (parse (slurp filename))))&quot; &quot;(def recs (slurp filename))&quot; &quot;(recs)&quot; &quot;(mapify (parse (slurp filename)))&quot; &quot;(def recs (mapify (parse (slurp filename))))&quot; &quot;append({:name \&quot;Billy the Dick\&quot; :glitter-index 4}, recs)&quot; &quot;(append [1 2] [2 3])&quot; &quot;(glitter-names 4 (append {:name \&quot;Billy the Dick\&quot; :glitter-index 4} recs))&quot; &quot;(append {:name \&quot;Billy the Dick\&quot; :glitter-index 4} recs)&quot; &quot;(append {:name \&quot;Billy the Dick\&quot;, :glitter-index 4} recs)&quot; &quot;(apply conj {:name \&quot;Billy the Dick\&quot;, :glitter-index 4} recs)&quot; &quot;(conj 7 [5 6 7 8 9])&quot; &quot;(conj [5 6 7 8 9] 7)&quot; &quot;(conj ({:name \&quot;D\&quot; :glitter-index 7} {:name \&quot;Bud\&quot; :glitter-index: 3} ) {:name \&quot;Taco\&quot; :glitter-index 1})&quot; &quot;(conj ({:name \&quot;D\&quot; :glitter-index 7} {:name \&quot;Bud\&quot; :glitter-index: 3} ))&quot; &quot;(conj '({:name \&quot;D\&quot; :glitter-index 7} {:name \&quot;Bud\&quot; :glitter-index: 3} ) {:name \&quot;Taco\&quot; :glitter-index 1})&quot; &quot;(conj recs {:name \&quot;E\&quot; :glitter-index 3})&quot; &quot;recs&quot; &quot;(append {:name \&quot;Billy the Dick\&quot; :glitter-index 1} recs)&quot; &quot;(defn sum\n  ([vals] (sum vals 0))\n  ([vals accumulating-total]\n   (if (empty? vals)\n     accumulating-total\n     (sum (rest vals) (+ (first vals) accumulating-total)))))&quot; &quot;(sum [1 3 4] 2)&quot; &quot;(sum [1 3 4])&quot; &quot;(sum '(1 3 4))&quot; &quot;(sum #{1 3 4})&quot; &quot;(sum #{1 3 4 4} )&quot; &quot;#{1 3 4 4}&quot; &quot;#{1 3 4}&quot; &quot;(sum #{1 3 4} )&quot; &quot;(defn sum2\n  ([vals]\n   (sum2 vals 0))&quot; &quot;(defn sum2\n  ([vals]\n   (sum2 vals 0))\n  ([vals accumulating-total]\n   (if (empty? vals)\n     accumulating-total\n     (recur (rest vals) (+ (first vals) accumulating-total)))))&quot; &quot;(sum 1 3 4 5 6)&quot; &quot;(sum [1 3 4 5 6])&quot; &quot;(sum2 [1 3 4 5 6])&quot; &quot;(time (sum2 [1 3 4 5 6]))&quot; &quot;(time (sum [1 3 4 5 6]))&quot; &quot;(doc recur)&quot; &quot;(def character\n  {:name \&quot;Smooches McCutes\&quot;\n   :attributes {:intelligence 10\n                :strength 4\n                :dexterity 5}})&quot; &quot;(def c-int (comp :intelligence :attributes))&quot; &quot;(def c-str (comp :strength :attributes))&quot; &quot;(def c-dex (comp :dexterity :attributes))&quot; &quot;(c-int character)&quot; &quot;(c-str character)&quot; &quot;(c-dex\n  character)&quot; &quot;(defn spell-slots\n  [char]\n  (int (inc (/ (c-int char) 2))))&quot; &quot;(spell-slots character)&quot; &quot;(def spell-slots-comp (comp int inc #(/ % 2) c-int))&quot; &quot;(spell-slots-comp character)&quot; &quot;(defn sleepy-identity\n  \&quot;Returns the given value after 1 second\&quot;\n  [x]\n  (Thread/sleep 1000)\n  x)&quot; &quot;(sleepy-identity \&quot;Mr. Fantastico\&quot;)&quot; &quot;(time )&quot; &quot;(time(sleepy-identity \&quot;Mr. Fantastico\&quot;))&quot; &quot;(def memo-sleepy-identity (memoize sleepy-identity))&quot; &quot;(memo-sleepy-identity \&quot;Mr. Fantastico\&quot;)&quot; &quot;(time (memo-sleepy-identity \&quot;Mr. Fantastico\&quot;))&quot;], :remote []}}</component>
</project>