<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1461079992191">{:repl-history {:ide [], :local [&quot;(ignore-last-operand (+1 2 10))&quot; &quot;(ignore-last-operand (+ 1 2 10))&quot; &quot;(ignore-last-operand (+ 1 2 (println \&quot;Fuck this noise!\&quot;)))&quot; &quot;(ignore-last-operand (+ 1 2 (println \&quot;Fuck this noise!\&quot;) (println \&quot;And this noise too!!\&quot;)))&quot; &quot;(macro-expand '(ignore-last-operand (+ 1 2 10)))&quot; &quot;(macroexpand '(ignore-last-operand (+ 1 2 10)))&quot; &quot;(defmacro infix\n  [infixed]\n  (list (second infixed)\n        (first infixed)\n        (last infixed)))&quot; &quot;(infix (1 + 2))&quot; &quot;(infix (7 * 2))&quot; &quot;(doc 0&gt;&gt;)&quot; &quot;(doc -&gt;&gt;)&quot; &quot;(source -&gt;)&quot; &quot;(list (read-string (\&quot;println \\\&quot;Jason Star Wars\\\&quot;\&quot; )))&quot; &quot;(list (read-string \&quot;(println \\\&quot;Jason Star Wars\\\&quot;)\&quot; ))&quot; &quot;(eval (list (read-string \&quot;(println \\\&quot;Jason Star Wars\\\&quot;)\&quot; )))&quot; &quot;(eval (list (read-string \&quot;println \\\&quot;Jason Star Wars\\\&quot;\&quot; )))&quot; &quot;(list (read-string \&quot;println \\\&quot;Jason Star Wars\\\&quot;\&quot; ))&quot; &quot;(list (read-string (quote(\&quot;println \\\&quot;Jason Star Wars\\\&quot;\&quot; ))))&quot; &quot;(doc when)&quot; &quot;(doc and)&quot; &quot;(source and)&quot; &quot;(println \&quot;7!!\&quot;)&quot; &quot;(doc println)&quot; &quot;(source println)&quot; &quot;(source print)&quot; &quot;(source pr)&quot; &quot;(defmacro my-print\n  [expression]\n  (list let [result expression]\n        (list println result)\n        result))&quot; &quot;(my-print \&quot;I'm fucking printed, yo!\&quot;)&quot; &quot;(println \&quot;I'm fucking printed, yo!\&quot;)&quot; &quot;(defmacro my-print\n  [expression]\n  (list 'let ['result 'expression]\n        (list 'println 'result)\n        'result))&quot; &quot;(my-print \&quot;I'm fucking printed too, yo!\&quot;)&quot; &quot;(defmacro my-print\n  [expression]\n  (list 'let ['result expression]\n        (list 'println 'result)\n        'result))&quot; &quot;(macroexpand (my-print \&quot;I'm fucking printed too, yo!\&quot;))&quot; &quot;(macroexpand '(my-print \&quot;I'm fucking printed too, yo!\&quot;))&quot; &quot;sweating-to-the-oldies&quot; &quot;'sweating-to-the-oldies&quot; &quot;(macroexpand ('(1 2 3)))&quot; &quot;(macroexpand '(1 2 3)))&quot; &quot;(macroexpand '(1 2 3))&quot; &quot;(source when)&quot; &quot;(defmacro report\n  [to-try]\n  `(if ~to-try\n     (println (quote ~to-try) \&quot;was successful:\&quot; ~to-try)\n     (println (quote ~to-try) \&quot;Was not successful:\&quot; ~to-try)))&quot; &quot;(report (== 1 2))&quot; &quot;(report (== 1 1.0))&quot; &quot;(report (= 1 1.0))&quot; &quot;(report (do (Thread/sleep 1000) (+ 1 1)))&quot; &quot;(defmacro report\n  [to-try]\n  `(let [result# ~to-try]\n     (if result#\n     (println (quote ~to-try) \&quot;was successful:\&quot; result#)\n     (println (quote ~to-try) \&quot;Was not successful:\&quot; result#))))&quot; &quot;(time (report (do (Thread/sleep 1000) (+ 1 1))))&quot; &quot;(def order-details\n  {:name \&quot;Mitchard Blimmons\&quot;\n   :email \&quot;mitchard.blimmonsgmail.com\&quot;})&quot; &quot;order-details&quot; &quot;(def order-details-validations\n  {:name [\&quot;Please enter a name\&quot; not-empty]\n   \n   :email [\&quot;Please enter an email address\&quot; not-empty\n           \&quot;Your email address doesn't look like an email address\&quot; #(or (empty? %) (re-seq #\&quot;@\&quot; %))]})&quot; &quot;(defn error-messages-for\n  \&quot;Return a seq of error messages\&quot;\n  [to-validate message-validator-pairs]\n  (map first (filter #(not ((second %) to-validate)))&quot; &quot;(defn error-messages-for\n  \&quot;Return a seq of error messages\&quot;\n  [to-validate message-validator-pairs]\n  (map first (filter #(not ((second %) to-validate))\n                     (partition 2 message-validator-pairs))))&quot; &quot;(doc error-messages-for)&quot; &quot;(error-messages-for \&quot;\&quot; [\&quot;Please enter a name\&quot; not-empty])&quot; &quot;(error-messages-for \&quot;\&quot; [\&quot;Please enter a name\&quot; not-empty \&quot;Go fuck yourself\&quot; not-empty])&quot; &quot;(defn validate\n  \&quot;Returns a map with a vector of errors for each key\&quot;\n  [to-validate validations]\n  (reduce (fn [errors validation]\n            (let [[fieldname validate-check-groups] validation\n                  value (get to-validate fieldname)\n                  error-messages (error-messages-for value validation-check-groups)]\n              (if (empty? error-messages)\n                errors\n                (assoc errors fieldname error-messages))))\n          {}\n          validations))&quot; &quot;(defn validate\n  \&quot;Returns a map with a vector of errors for each key\&quot;\n  [to-validate validations]\n  (reduce (fn [errors validation]\n            (let [[fieldname validation-check-groups] validation\n                  value (get to-validate fieldname)\n                  error-messages (error-messages-for value validation-check-groups)]\n              (if (empty? error-messages)\n                errors\n                (assoc errors fieldname error-messages))))\n          {}\n          validations))&quot; &quot;(validate order-details order-details-validations)&quot; &quot;(let [errors (validate order-details order-details-validations)]\n  (if (empty? errors)\n    (println :success)\n    (println :failure errors)))&quot; &quot;(defmacro if-valid\n  \&quot;Handle validation more concisely\&quot;\n  [to-validate validations errors-name &amp; then-else]\n  `(let [~errors-name (validate ~to-validate ~validations)]\n     (if (empty? ~errors-name)\n       ~@then-else)))&quot; &quot;(macroexpand\n  '(if-valid order-details order-details-validations my-error-name\n             (println :success)\n             (println :failure my-error-name)))&quot; &quot;(macroexpand future)&quot; &quot;(doc future)&quot; &quot;(doc realized)&quot; &quot;(doc realized?)&quot; &quot;(source future)&quot; &quot;(source realized?)&quot; &quot;(source if)&quot; &quot;(doc if)&quot; &quot;(future (Thread/sleep 4000)\n        (println \&quot;I'll print after 4 seconds\&quot;))&quot; &quot;(future (Thread/sleep 4000)\n        (println \&quot;I'll print after 4 seconds\&quot;))(println \&quot;I'll print now\&quot;)&quot; &quot;(macroexpand @)&quot; &quot;(let [result (future (println \&quot;this prints once\&quot;)\n                     (+ 1 1))]\n  (println \&quot;deref: \&quot; (deref result))\n  (println \&quot;@: \&quot; @result))&quot; &quot;(let [result (future (Thread/sleep 3000)\n                     (+1 1))]\n  (println \&quot;The result is: \&quot; @result)\n  (println \&quot;It will be at least 3 seconds before I print\&quot;))&quot; &quot;(let [result (future (Thread/sleep 3000)\n                     (+1 1))]\n  (println \&quot;The result is: \&quot; @result))\n  (println \&quot;It will be at least 3 seconds before I print\&quot;)&quot; &quot;(let [result (future (Thread/sleep 3000)\n                     (+ 1 1))]\n  (println \&quot;The result is: \&quot; @result))\n  (println \&quot;It will be at least 3 seconds before I print\&quot;)&quot; &quot;(deref (future (Thread/sleep 1000) 0) 10 5)&quot; &quot;(deref (future (Thread/sleep 1000) 1500) 10 5)&quot; &quot;(deref (future (Thread/sleep 1000) 0) 1500 5)&quot; &quot;(deref (future (Thread/sleep (+ 1 17)) 0) 1500 5)&quot; &quot;(deref (future (Thread/sleep ) 0) 1500 5)&quot; &quot;(deref (future (Thread/sleep 1000) (+ 1 17)) 1500 5)&quot; &quot;(deref (future (Thread/sleep 1000) (+ 1 17)) 15 5)&quot; &quot;(realized? (future (Thread/sleep 1000)))&quot; &quot;(let [f (future)]\n  @f\n  (realized? f))&quot; &quot;(def jackson-5-delay\n  (delay (let [message \&quot;Just call my name and I'll be there\&quot;]\n           (println \&quot;First deref: \&quot; message)\n           message)))&quot; &quot;(jackson-5-delay)&quot; &quot;(force jackson-5-delay)&quot; &quot;(@jackson-5-delay)&quot; &quot;@jackson-5-delay&quot; &quot;(def my-promise (promise))&quot; &quot;(deliver my-promise (+ 1 2))&quot; &quot;@my-promise&quot; &quot;(def yak-butter-international\n  {:store \&quot;Yak Butter International\&quot;\n   :price 90\n   :smoothness 90})&quot; &quot;(def butter-than-nothing\n  {:store \&quot;Butter Than Nothing\&quot;\n   :price 150\n   :smoothness 83})&quot; &quot;(def baby-got-yak\n  {:store \&quot;Baby Got Yak\&quot;\n   :price 94\n   :smoothness 99})&quot; &quot;(defn mock-api-call\n  [result]\n  (Thread/sleep 1000)\n  result)&quot; &quot;(defn satisfactory?\n  \&quot;If the butter meets our criteria, return the butter, else return false\&quot;\n  [butter]\n  (and (&lt;= (:price butter) 100)\n       (&gt;= (:smoothness butter) 97)\n       butter))&quot; &quot;(time (some (comp satisfactory? mock-api-call)\n            [yak-butter-international butter-than-nothing baby-got-yak]))&quot; &quot;(time\n  (let [butter-promise (promise)]\n    (doseq [butter [yak-butter-international butter-than-nothing baby-got-yak]]\n      (future (if-let [satisfactory-butter (satisfactory? (mock-api-call butter))]\n                (deliver butter-promise satisfactory-butter))))\n    (println \&quot;And the winner is: \&quot; @butter-promise)))&quot; &quot;(let [p (promise)]\n  (deref p 100 \&quot;timed out\&quot;))&quot;], :remote []}}</component>
</project>