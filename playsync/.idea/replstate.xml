<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1461879239893">{:repl-history {:ide [], :local [&quot;(&gt;!! echo-buffer \&quot;ketchup\&quot;)&quot; &quot;(doc &gt;!!)&quot; &quot;(doc go)&quot; &quot;(let [[in out] (hot-dog-machine)]\n  (&gt;!! in \&quot;pocket lint\&quot;)\n  (&lt;!! out))&quot; &quot;(let [[in out] (hot-dog-machine-v2 2)]\n  (&gt;!! in \&quot;pocket lint\&quot;)\n  (println (&gt;!! out))\n  \n  (&gt;!! in 3)\n  (println (&lt;!! out))\n  \n  (&gt;!! in 3)\n  (println (&lt;!! out))\n  \n  (&gt;!! in 3)\n  (&lt;!! out))&quot; &quot;(let [[in out] (hot-dog-machine-v2 2)]\n  (&gt;!! in \&quot;pocket lint\&quot;)\n  (println (&lt;!! out))\n  \n  (&gt;!! in 3)\n  (println (&lt;!! out))\n  \n  (&gt;!! in 3)\n  (println (&lt;!! out))\n  \n  (&gt;!! in 3)\n  (&lt;!! out))&quot; &quot;(let [c1 (chan)\n      c2 (chan)\n      c3 (chan)]\n  (go (&gt;! c2 (clojure.string/upper-case &lt;&lt;! c1))))&quot; &quot;(let [c1 (chan)\n      c2 (chan)\n      c3 (chan)]\n  (go (&gt;! c2 (clojure.string/upper-case (&lt;! c1))))\n  (go (&gt;1 c2 (clojure.string/reverse (&lt;! c2))))\n  (go (println (&lt;! c3)))\n  (&gt;!! c1 \&quot;redrum\&quot;))&quot; &quot;(let [c1 (chan)\n      c2 (chan)\n      c3 (chan)]\n  (go (&gt;! c2 (clojure.string/upper-case (&lt;! c1))))\n  (go (&gt;! c2 (clojure.string/reverse (&lt;! c2))))\n  (go (println (&lt;! c3)))\n  (&gt;!! c1 \&quot;redrum\&quot;))&quot; &quot;(let [c1 (chan)\n      c2 (chan)\n      c3 (chan)]\n  (go (&gt;! c2 (clojure.string/upper-case (&lt;! c1))))\n  (go (&gt;! c3 (clojure.string/reverse (&lt;! c2))))\n  (go (println (&lt;! c3)))\n  (&gt;!! c1 \&quot;redrum\&quot;))&quot; &quot;(defn append-to-file\n  \&quot;Write a string to the end of a file\&quot;\n  [filename s]\n  (spit filename s :apped true))&quot; &quot;(defn format-quote\n  \&quot;Delineate the beginning and end of a quote because it's convenient\&quot;\n  [quote]\n  (str \&quot;=== BEGIN QUOTE ===\\n\&quot; quote \&quot;=== END QUOTE ===\\n\\n\&quot;))&quot; &quot;(defn random-quote\n  \&quot;Retrieve a random quote and format it\&quot;\n  []\n  (format-quote (slurp \&quot;http://www.braveclojure.com/random-quote\&quot;)))&quot; &quot;(defn snag-quotes\n  [filename num-quotes]\n  (let [c (chan)]\n    (go (while true (append-to-file filename (&lt;! c))))\n    (dotimes [n num-quotes] (go (&gt;! c (random-quote))))))&quot; &quot;(snag-quotes \&quot;text.txt\&quot; 5)&quot; &quot;(defn upper-caser\n  [in]\n  (let [out (chan)]\n    (go (while true (&gt;! out (clojure.string/upper-case (&lt;! in)))))\n    out))&quot; &quot;(defn reverser\n  [in]\n  (let [out (chan)]\n    (go (while true (&gt;! out (clojure.string/reverse (&lt;! in)))))\n    out))&quot; &quot;(defn printer\n  [in]\n  (go (while true (println (&lt;! in)))))&quot; &quot;(def in-chan (chan))&quot; &quot;(def upper-caser-out (upper-caser in-chan))&quot; &quot;(def reverser-out (reverser upper-caser-out))&quot; &quot;(printer reverser-out)&quot; &quot;(&gt;!! in-chan \&quot;redrum\&quot;)&quot; &quot;(&gt;!! in-chan repaid)&quot; &quot;(&gt;!! in-chan \&quot;repaid\&quot;)&quot; &quot;(.toUpperCase \&quot;By Bluebeard's bananas!\&quot;)&quot; &quot;(.indexOf \&quot;Let's synergize our bleedingy edges\&quot; \&quot;y\&quot;)&quot; &quot;(.indexOf \&quot;Let's synergize our bleeding edges\&quot; \&quot;y\&quot;)&quot; &quot;(java.lang.Math/PI)&quot; &quot;(java.lang.Math/abs -3 -4)&quot; &quot;(java.lang.Math/abs -3)&quot; &quot;(macroexpand '(.toUpperCase \&quot;By Bluebeard's bananas\&quot;))&quot; &quot;(macroexpand-1 '(.toUpperCase \&quot;By Bluebeard's bananas\&quot;))&quot; &quot;(java.util.Stack.)&quot; &quot;(let [stack (java.util.Stack.)]\n  (.push stack \&quot;Latest episode of Game of Thrones, ho!\&quot;)\n  stack)&quot; &quot;(let [stack (java.util.Stack.)]\n  (.push stack \&quot;Latest episode of Game of Thrones, ho!\&quot;)\n  (.psuh stack \&quot;Some other crazy crap!\&quot;)\n  stack)&quot; &quot;(let [stack (java.util.Stack.)]\n  (.push stack \&quot;Latest episode of Game of Thrones, ho!\&quot;)\n  (.push stack \&quot;Some other crazy crap!\&quot;)\n  stack)&quot; &quot;(doc macroexpand-1)&quot; &quot;(doc macroexpand)&quot; &quot;(doc doto)&quot; &quot;(System/getenv)&quot; &quot;(System/getProperty \&quot;user.dir\&quot;)&quot; &quot;(System/getProperty \&quot;java.version\&quot;)&quot; &quot;(spit \&quot;/tmp/hercules-todo-list\&quot;\n      \&quot;- kill dat lion brov\n      - chop up what nasty multi-headed snake thing\&quot;)&quot; &quot;(spit \&quot;c/tmp/hercules-todo-list\&quot;\n      \&quot;- kill dat lion brov\n      - chop up what nasty multi-headed snake thing\&quot;)&quot; &quot;(spit \&quot;c/hercules-todo-list.txt\&quot;\n      \&quot;- kill dat lion brov\n      - chop up what nasty multi-headed snake thing\&quot;)&quot; &quot;(spit \&quot;c:/hercules-todo-list.txt\&quot;\n      \&quot;- kill dat lion brov\n      - chop up what nasty multi-headed snake thing\&quot;)&quot; &quot;(slurp \&quot;c:/hercules-todo-list.txt\&quot;)&quot; &quot;((fn [x y]\n   #{x y})\n  1 5 6 5 7 6 5)&quot; &quot;((fn [x &amp; y]\n   #{x y})\n  1 5 6 5 7 6 5)&quot; &quot;((fn [x &amp; y]\n   #{x (map y})\n  1 5 6 5 7 6 5)&quot; &quot;((fn [&amp; y]\n   #{y})\n  1 5 6 5 7 6 5)&quot; &quot;(apply '(1 2 3 4 5))&quot; &quot;(apply identity '(1 2 3 4 5))&quot; &quot;(doc apply)&quot; &quot;(apply identity 1 2 3 4))&quot; &quot;(apply identity [1 2 3 4])&quot; &quot;(cons 1 [2 3])&quot; &quot;(cons 1 (2 3))&quot; &quot;(cons 1 '(2 3))&quot; &quot;`(map identity [1 2 3 4])&quot; &quot;[1 @(2 3)]&quot; &quot;[1 (2 3)]&quot; &quot;(def x (2 3)\n  )&quot; &quot;(def x '(2 3)\n  )&quot; &quot;[1 x]&quot; &quot;[1 @x]&quot; &quot;'[1 @x]&quot; &quot;(*ns*)&quot; &quot;(println *ns*)&quot; &quot;(str \&quot;The current namespace is \&quot; *ns*)&quot; &quot;(source and)&quot; &quot;(dock and#)&quot; &quot;(doc and#)&quot; &quot;(source and#)&quot; &quot;(source or)&quot; &quot;(source when)&quot; &quot;(doc source)&quot; &quot;(source source)&quot; &quot;(source source-fn)&quot; &quot;(doc source-fn)&quot; &quot;('(1 (2 3)))&quot; &quot;'(1 (2 3))&quot; &quot;(seq '(1 (2 3)))&quot; &quot;(seq [1 (2 3)])&quot; &quot;(seq [1 '(2 3)])&quot; &quot;[1 '(2 3)]&quot; &quot;(source empty?)&quot; &quot;(:key 1 :key2 2 :key3 3)&quot; &quot;'(:key 1 :key2 2 :key3 3)&quot; &quot;[:key 1 :key2 2 :key3 3]&quot; &quot;(def x )&quot; &quot;(def x [:key 1 :key2 2 :key3 3])&quot; &quot;(:key1 x)&quot; &quot;(get x :key1)&quot; &quot;(x)&quot; &quot;x&quot; &quot;(first x)&quot; &quot;(second x)&quot; &quot;(third x)&quot; &quot;(rest x)&quot;], :remote []}}</component>
</project>