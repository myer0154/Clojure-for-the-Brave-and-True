<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459277766824">{:repl-history {:ide [], :local [&quot;(doc take)&quot; &quot;(source take)&quot; &quot;(source -main)&quot; &quot;(source if)&quot; &quot;(doc if)&quot; &quot;(take 3 [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(drop 3 [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(take-while (&gt; 4) [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(take-while #(&gt; % 4) [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(take-while #(&lt; % 4) [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(take-while #(&lt; % 7) [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(drop-while #(&lt; % 7) [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(drop-while #(&gt; % 4) [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(def food-journal\n  [{:month 1 :day 1 :human 5.3 :critter 2.3}\n   {:month 1 :day 2 :human 5.1 :critter 2.0}\n   {:month 2 :day 1 :human 4.9 :critter 2.1}\n   {:month 2 :day 2 :human 5.0 :critter 2.5}\n   {:month 3 :day 1 :human 4.2 :critter 3.3}\n   {:month 3 :day 2 :human 4.0 :critter 3.8}\n   {:month 4 :day 1 :human 3.7 :critter 3.9}\n   {:month 4 :day 2 :human 3.7 :critter 3.6}])&quot; &quot;(take-while #(&lt; ((:month %) 3) food-journal)&quot; &quot;(take-while #(&lt; (:month %) 3) food-journal)&quot; &quot;(drop-while #(&lt; (:month %) 3) food-journal)&quot; &quot;(take-while #(&lt; (:month %) 4)&quot; &quot;(take-while #(&lt; (:month %) 4)\n            (drop-while #(&lt; (:month %) 2)))&quot; &quot;(take-while #(&lt; (:month %) 4)\n            (drop-while #(&lt; (:month %) 2) food-journal))&quot; &quot;(filter #(&lt; (:human %) 5) food-journal)&quot; &quot;(filter #(&lt; (month %) 3) food-journal)&quot; &quot;(filter #(&lt; (:month %) 3) food-journal)&quot; &quot;(some #(&gt; (:critter %) 5) food-journal)&quot; &quot;(some #(&gt; (:critter %) 3) food-journal)&quot; &quot;(some #(and (&gt; (:critter %) 3) %) food-journal) &quot; &quot;(some #(and (&gt; (:critter %) 1) %) food-journal) &quot; &quot;(some #(and (&gt; (:critter %) 2.4) %) food-journal) &quot; &quot;(sort [3 1 2])&quot; &quot;(sort [\&quot;aaa\&quot; \&quot;bb\&quot; \&quot;c\&quot;])&quot; &quot;(sort [\&quot;aaa\&quot; \&quot;cc\&quot; \&quot;b\&quot;])&quot; &quot;(sort-by count [\&quot;aaa\&quot; \&quot;cc\&quot; \&quot;b\&quot;])&quot; &quot;(concat [1 2] [3 4])&quot; &quot;(concat \&quot;Fuck this \&quot; \&quot;shit\&quot;)&quot; &quot;(def testString (concat \&quot;Fuck this \&quot; \&quot;shit\&quot;))&quot; &quot;testString&quot; &quot;(str testString)&quot; &quot;(str testString \&quot; \&quot;)&quot; &quot;(seq [1 2 3 5 6]))&quot; &quot;(doc seq)&quot; &quot;(sqe [1 2 3 4])&quot; &quot;(seq [1 2 3 4])&quot; &quot;(seq (1 2 3 4))&quot; &quot;(seq #{:a 1 :b 2 :c 3})&quot; &quot;(def vampire-database\n  {0 {:make-blood-puns? false, :has-pulse? true :name \&quot;Mcfishwich\&quot;}\n   1 {:make-blood-puns? false, :has-pulse? true :name \&quot;McMackson\&quot;}\n   2 {:make-blood-puns? true, :has-pulse? false :name \&quot;Damn Salvatore\&quot;}\n   3 {:make-blood-puns? true, :has-pulse? true :name \&quot;Mickey Mouse\&quot;}}) &quot; &quot;(defn vampire-related-details\n  [social-security-number]\n  (Thread/sleep 1000)\n  (get vampire-database social-security-number))&quot; &quot;(defn vampire?\n  [record]\n  (and (:makes-blood-puns? record)\n       (not (:has-pulse? record))\n       record))&quot; &quot;(defn identify-vampire\n  [social-security-numbers]\n  (first(filter vampire? (map vampire-related-details social-security-numbers))))&quot; &quot;(time (vampire-related-details 0))&quot; &quot;(time (def mapped-details (map vampire-related-details (range 0 1000000))))&quot; &quot;(time (first mapped-details))&quot; &quot;(time (identify-vampire (range 0 1000000)))&quot; &quot;(str (take 8 (repeat \&quot;na\&quot;)) [\&quot;Batman!\&quot;])&quot; &quot;(concat (take 8 (repeat \&quot;na\&quot;)) [\&quot;Batman!\&quot;])&quot; &quot;(take 3 [1 4 6 7 8])&quot; &quot;(take 3 (repeatedly (fn [] (rand-int 10))))&quot; &quot;(take 3 #(rand-int 10))&quot; &quot;(take 3 (#(rand-int 10)))&quot; &quot;(take 3 (rand-int 10))&quot; &quot;(take 3 (repeatedly #(rand-int 10)))&quot; &quot;(defn even-numbers\n  ([] (even-numbers 0))\n  ([n] (cons n (lazy-seq (even-numbers(+ n 2))))))&quot; &quot;(even-numbers)&quot; &quot;(take 10 (even-numbers))&quot; &quot;(take 10 (even-numbers 14))&quot; &quot;(take 10 (even-numbers 13))&quot; &quot;(take 10 (even-numbers 22))&quot; &quot;(empty? [1 2 3 4])&quot; &quot;(empty? '(1 2 34))&quot; &quot;(map identity {:sunlight-reaction \&quot;Glitter!\&quot;})&quot; &quot;(into {} (map identity {:sunlight-reaction \&quot;Glitter!\&quot;}))&quot; &quot;(map identity [:garlic :sesame-oil :fried-eggs])&quot; &quot;(into [] (map identity [:garlic :sesame-oil :fried-eggs]))&quot; &quot;(into () (map identity [:garlic :sesame-oil :fried-eggs]))&quot; &quot;(map identity [:garlic-clove :garlic clove])&quot; &quot;(map identity [:garlic-clove :garlic-clove])&quot; &quot;(into #{} (map identity [:garlic-clove :garlic-clove]))&quot; &quot;(into #{:pot-sticker} (map identity [:garlic-clove :garlic-clove]))&quot; &quot;(into [\&quot;cherry\&quot;] '(\&quot;pine\&quot;, \&quot;spruce\&quot;))&quot; &quot;(into {:favorite-animal \&quot;kitty\&quot;} {:least-favorite-smell \&quot;dog\&quot; :relationship-with-teenager \&quot;creepy\&quot;})&quot; &quot;(conj [0] [1])&quot; &quot;(conj [0] 1)&quot; &quot;(conj [0] 1 2 3 [5 6] {:7 8})&quot; &quot;(max 0 2 5 3)&quot; &quot;(max [0 2 5 3])&quot; &quot;(max (apply [0 2 5 3]))&quot; &quot;(apply (max [0 2 5 3]))&quot; &quot;(apply max [0 2 5 3]))&quot; &quot;(apply max [0 2 5 3])&quot; &quot;(defn my-into\n  [target additions]\n  (apply conj target additions))&quot; &quot;(my-into [0 2] (1 3 5))&quot; &quot;(my-into [0 2] '(1 3 5))&quot; &quot;(my-into '(0 2) [1 3 5])&quot; &quot;(def add-missing-elements\n  (partial conj [\&quot;water\&quot; \&quot;earth\&quot; \&quot;air\&quot;]))&quot; &quot;(add-missing-elements \&quot;unobtainium\&quot; \&quot;adamantium\&quot;)&quot; &quot;(def add20 (partial + 20))&quot; &quot;(add20 23)&quot; &quot;(add20 23 15)&quot; &quot;(defn identify-humans\n  [social-security-numbers]\n  (filter #(not (vampire %))\n          (map vampire-related-details social-security-numbers)))&quot; &quot;(defn identify-humans\n  [social-security-numbers]\n  (filter #(not (vampire? %))\n          (map vampire-related-details social-security-numbers)))&quot; &quot;(doc complement)&quot; &quot;(source complement)&quot;], :remote []}}</component>
</project>