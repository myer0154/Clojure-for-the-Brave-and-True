<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1461089192654">{:repl-history {:ide [], :local [&quot;(-main)&quot; &quot;(queue-sayings1)&quot; &quot;(time (force queue-sayings2))&quot; &quot;(time queue-sayings2)&quot; &quot;(queue-sayings2)&quot; &quot;(time @(queue-sayings2))&quot; &quot;(def fred (atom {:cuddle-hunger-level 0\n                 :percent-deteriorated 0}))&quot; &quot;(fred)&quot; &quot;fred&quot; &quot;(let [zombie-state @fred]\n  (if (&gt;= (:percent-deteriorated zombie-state) 50)\n    (future (println (:cuddle-hunger-level zombie-state)))))&quot; &quot;(swap! fred\n       (fn [current-state]\n         (merge-with + current-state {:cuddle-hunger-level 1})))&quot; &quot;(swap! fred\n       (fn [current-state]\n         (merge-with + current-state {:cuddle-hunger-level 1\n                                      :percent-deteriorated 1\n                                      :random-value-for-some-reason 3})))&quot; &quot;(swap! fred\n       (fn [current-state]\n         (merge-with + current-state {:cuddle-hunger-level 1\n                                      :percent-deteriorated 2})))&quot; &quot;(doc update-in)&quot; &quot;(swap! fred update-in [:cuddle-hunger-level] + 10)&quot; &quot;(doc swap!)&quot; &quot;(source swap!)&quot; &quot;(source .swap)&quot; &quot;(defn shuffle-speed\n  [zombie]\n  (* (:cuddle-hunger-level zombie)\n     (- 100 (:percent-deteriorated zombie))))&quot; &quot;(shuffle-speed @fred) &quot; &quot;(* 13 97)&quot; &quot;(defn shuffle-alert\n  [key watched old-state new-state]\n  (let [sph (shuffle-speed new-state)]\n    (if (&gt; sph 5000)\n      (do\n        (println \&quot;Run, you fool!\&quot;)\n        (println \&quot;The zombie's SPH is now \&quot; sph)\n        (println \&quot;This message brought to you courtesy of \&quot; key))\n      (do\n        (println \&quot;All's well with \&quot; key)\n        (println \&quot;Cuddle hunger: \&quot; (:cuddle-hunger-level new-state))\n        (println \&quot;Percent deteriorated: \&quot; (:percent-deteriorated new-state))\n        (println \&quot;SPH: \&quot; sph)))))&quot; &quot;(reset! fred {:cuddle-hunger-level 22\n              :percent-deteriorated 2})&quot; &quot;@fred&quot; &quot;(add-watch fred :fred-shuffle-alert shuffle-alert)&quot; &quot;(swap! fred update-in [:percent-deteriorated] + 1)&quot; &quot;(swap! fred update-in [:cuddle-hunger-level] + 30)&quot; &quot;(swap! fred update-in [:percent-deteriorated] - 2)&quot; &quot;(defn percent-deteriorated-validator\n  [{:keys [percent-deteriorated]}]\n  (and (&gt;= percent-deteriorated 0)\n       (&lt;= percent-deteriorated 100)))&quot; &quot;(def bobby\n  (atom\n    {:cuddle-hunger-level 0 :percent-deteriorated 0}\n    :validator percent-deteriorated-validator))&quot; &quot;(swap! bobby update-in [:percent-deteriorated] + 20)&quot; &quot;(defn percent-deteriorated-validator\n  [{:keys [percent-deteriorated]}]\n  (or (and (&gt;= percent-deteriorated 0)\n           (&lt;= percent-deteriorated 100))\n      (throw (IllegalStateException. \&quot;That's not mathy!\&quot;))))\n&quot; &quot;(def bobby\n  (atom\n    {:cuddle-hunger-level 0, :percent-deteriorated 0}\n    :validator percent-deteriorated-validator))&quot; &quot;(swap! bobby update-in [:percent-deteriorated] + 200)&quot;], :remote []}}</component>
</project>